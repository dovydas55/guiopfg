//Description
particle_system File/Name
{
	//base options
	quota 						(default 10, max 10000)

	material 					(file/name, default: none(blank))
	
	particle_width 				(default: 100)
	
	particle_height 			(default: 100)
	
	cull_each					(true|false(default: false))
	
	renderer					(optional for plugins, default: billboard)
	
	sorted						(true|false(default: false))
	
	local_space					(true|false(default: false))
	
	billboard_type				(point | oriented_common | oriented_self | perpendicular_common | perpendicular_self 
								(default: point))
	
	billboard_origin			(top_left | top_center | top_right | center_left | center | center_right | bottom_left | bottom_center|bottom_right 
								(default: center))
	
	billboard_rotation_type		(vertex|texcoord(default: texcoord))

	common_direction			(<x>,<y>,<z> (deault: 0 0 1))

	common_up_vecto	r			(<x>,<y>,<z> (deault: 0 1 0))

	//atribute of 'billboard' particle renderer
	point_rendering	

	accurate_facing

	iteration_interval

	nonvisible_update_timeout

	//area emmitter
	emmiter <T> 				(Point | Box | Cylinder | Ellipsoid | HollowEllipsoid | Ring)
	{
		angle					(max angle in degrees, default: 0)

		color 					(<r> <g> <b> [<a>], default: 1 1 1 1)

		//must be specified together
		color_range_start		(<r> <g> <b> [<a>], default: 1 1 1 1)
		color_range_end			(<r> <g> <b> [<a>], default: 1 1 1 1)
		//

		direction 				(<x> <y> <z>, default: 1 0 0)

		emission_rate			(default 10)

		position				(<x> <y> <z>, default: 0 0 0)

		velocity 				(world_units_per_second, default 1)

		//randomizes velocity
		velocity_min 			(default 1)

		velocity_max 			(default 1)
		//

		time_to_live 			(<seconds>, default 5)

		//radomizes lifetime of particles
		time_to_live_min 		(<seconds>, default 5)

		time_to_live_max 		(<seconds>, default 5)
		//

		duration 				(<seconds>, default 0)

		//randomizes duration
		duration_min 			(as duration, default 0)

		duration_max 			(as duration, default 0)
		//

		repeat_delay 			(<seconds>, default 0)

		//randomizes repeat_delay
		repeat_delay_min 		(<seconds>, default 0)

		repeat_delay_max 		(<seconds>, default 0)
		//
	}

	//affectors have no universal attributes

	//can be used for gravity, wind and any linear force
	affector LinearForce{
		force_vector			(<x> <y> <z>, default: 0 -100 0)

		force_application 		(add|average)
	}


	affector ColorFader{
		red 					(<delta_value>, default 0)

		green 					(<delta_value>, default 0)

		blue 					(<delta_value>, default 0)

		alpha 					(<delta_value>, default 0)
	}

	//activates color changes after a specified amount of time
	affector ColorFader2{
		//1 = before state_change, 2 = after state schange
		red1 					(<delta_value>, default 0)

		green1 					(<delta_value>, default 0)

		blue1 					(<delta_value>, default 0)

		alpha1 					(<delta_value>, default 0)

		red2 					(<delta_value>, default 0)

		green2 					(<delta_value>, default 0)

		blue2 					(<delta_value>, default 0)

		alpha2 					(<delta_value>, default 0)

		state_change 			(<seconds>, default: 1)
	}

	//scales particles in flight
	affector Scaler{
		rate 					(<value per second>)
	}

	//Rotates particles in flight
	affector Rotator{
		rotation_speed_range_start	(<degrees_per_second>, default: 0)
		
		rotation_speed_range_end	(<degrees_per_second>, default: 0)

		rotation_range_start 		(<degrees>, default: 0)

		rotation_range_end 			(<degrees>, default: 0)
	}

	//as with colorFader2 exept with variable number of defined stages
	affector ColorInterploator{
		time0 					(<0-1 based on lifetime>, default: 1)
		color0					(<r> <g> <b> [<a>], default: 0.5 0.5 0.5 0.0)

		time1 					(<0-1 based on lifetime>, default: 1)
		color2					(<r> <g> <b> [<a>], default: 0.5 0.5 0.5 0.0)

		.
		.
		.
		.
		.
	}

	//colors particles from image file
	affector ColorImage{
		image 				(<image name (e.g. rainbow.png)>)
	}

	//define plane that collides with particles
	affector DeflectorPlane{
		plane_point 		(a point on the plain, default: 0 0 0)
		
		plane_normal		(normal vector of the plane, default: 0 1 0)

		bounce 				( 0(no bounce), 1 (100% bounce), default: 1.0)
	}

	//apply randomness to particles
	affector DirectionRandomizer{
		randomness 			(ammount applied to each axial direction, default: 1)

		scope 				(percentage of particles affected in each run of the affector, default: 1.0)

		keep_velocity 		(true|false, default: false)
	}
}